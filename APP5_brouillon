import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import javax.swing.*;
import javax.swing.border.LineBorder;
import javax.swing.table.DefaultTableModel;
import java.util.HashMap;
import javax.swing.text.MaskFormatter;

import static javax.swing.JOptionPane.QUESTION_MESSAGE;

//----------------------------------------------------------------------------------------------------------------------
// MENU ARCHIVES => FAIT
//----------------------------------------------------------------------------------------------------------------------

class Interface extends JFrame {

    public static JPanel panel = new JPanel();
    public static JToolBar toolBar = new JToolBar();
    public static JTabbedPane tabbedPane = new JTabbedPane();
    private static final long serialVersionUID = 1L;

    public Interface() {
        super("⚚");
        super.setBackground(Color.CYAN);
        super.setSize(400, 400);
        super.setLocationRelativeTo (null);
        super.setDefaultCloseOperation( EXIT_ON_CLOSE );

        toolBar.add(Box.createHorizontalGlue());
        toolBar.setBorder(new LineBorder(Color.CYAN));

        panel.setLayout(new BorderLayout());
        JMenuBar menuBar = new JMenuBar();

        menuBar.add(new MenuClient().main());
        menuBar.add(new MenuMedicaments().main());
        menuBar.add(new MenuAchat().main());
        menuBar.add(new MenuArchives().main());
        menuBar.add(info());
        menuBar.add(exit());

        super.setJMenuBar(menuBar);
        super.add(toolBar, BorderLayout.PAGE_START);
        super.getContentPane().add(panel);

        super.setVisible(true);
    }

    //------------------------------------------------------------------------------------------------------------------
    public JMenu info() {
        JMenu menu = new JMenu("Info");

        Action afficherInfo = new AbstractAction("Information", new ImageIcon(Interface.class.getResource("icons/info24.png"))) {
            @Override
            public void actionPerformed(ActionEvent e) {
                JOptionPane.showMessageDialog(null, "Pour empecher la fermeture \n" +
                                "de la fenetre concernant archives \n" +
                                "il faut cliquer sur la partie AVANT icone x",
                        " ", JOptionPane.INFORMATION_MESSAGE, new ImageIcon(Interface.class.getResource("icons/info64.png")));
            }
        };
        Interface.toolBar.add(afficherInfo);
        menu.add(new JMenuItem(afficherInfo));
        return menu;
    }
    //------------------------------------------------------------------------------------------------------------------
    private JMenu exit() {
        JMenu menu = new JMenu("Exit");

        Action exit = new AbstractAction("Exit", new ImageIcon(Interface.class.getResource("icons/exit.png"))) {
            @Override
            public void actionPerformed(ActionEvent e) {
                System.out.println("chercher");
                System.exit(0);
            }
        };

        toolBar.add(exit);
        menu.add(new JMenuItem(exit));
        return menu;
    }
    //------------------------------------------------------------------------------------------------------------------
}
//----------------------------------------------------------------------------------------------------------------------
class MenuClient extends JFrame {

    JMenu menu = new JMenu("Client");

    public JMenu main() {
        Interface.panel.repaint();
        Interface.tabbedPane.removeAll();

        Action ajouter = new AbstractAction("Nouveau", new ImageIcon(Interface.class.getResource("icons/add.png"))) {
            public void actionPerformed(ActionEvent e) {
                Interface.tabbedPane.addTab("Nouveau client", nouveauClient());
            }
        };
        Action modifier = new AbstractAction("Modifier", new ImageIcon(Interface.class.getResource("icons/edit.png"))) {
            @Override
            public void actionPerformed(ActionEvent e) {
                String key = VerificationCle();
                if(key.equals("null")){
                    int index = Interface.tabbedPane.getTabCount();;
                    if (index >= 0) Interface.tabbedPane.removeTabAt(index);
                } else Interface.tabbedPane.addTab("Modifier client", modifierClient(key));
            }
        };
        Action supprimer = new AbstractAction("Supprimer", new ImageIcon(Interface.class.getResource("icons/del.png"))) {
            @Override
            public void actionPerformed(ActionEvent e) {
                System.out.println("supprimer");
                Interface.tabbedPane.addTab("Supprimer client", supprimerClient());
            }
        };
        Action chercher = new AbstractAction("Chercher", new ImageIcon(Interface.class.getResource("icons/chercher.png"))) {
            @Override
            public void actionPerformed(ActionEvent e) {
                System.out.println("chercher");
                Interface.tabbedPane.addTab("Chercher client", chercherClient());

            }
        };

        Interface.toolBar.add(ajouter);
        Interface.toolBar.add(modifier);
        Interface.toolBar.add(chercher);

        menu.add(new JMenuItem(ajouter));
        menu.addSeparator();
        menu.add(new JMenuItem(modifier));
        menu.addSeparator();
        menu.add(new JMenuItem(supprimer));
        menu.addSeparator();
        menu.add(new JMenuItem(chercher));
        Interface.panel.setLayout(new BorderLayout());
        Interface.panel.add(Interface.tabbedPane, BorderLayout.CENTER);

        return menu;
    }

    private JPanel nouveauClient(){

        JFormattedTextField numeroTel = null, numeroSecu = null;

        JPanel panel = BoxLayoutUtils.createVerticalPanel();
        panel.setBorder(BorderFactory.createEmptyBorder(10,20,20,20));

        try {
            MaskFormatter phoneFormatter = new MaskFormatter("##########");
            MaskFormatter numFormatter = new MaskFormatter("#############");
            phoneFormatter.setPlaceholderCharacter('0');
            numFormatter.setPlaceholderCharacter('0');
            numeroSecu = new JFormattedTextField(numFormatter);
            numeroTel = new JFormattedTextField(phoneFormatter);
            numeroTel.setColumns(10);
            numeroSecu.setColumns(10);
        } catch (Exception e) { e.printStackTrace(); }


        JPanel nomBox = BoxLayoutUtils.createHorizontalPanel();
        JPanel prenomBox = BoxLayoutUtils.createHorizontalPanel();
        JPanel adresseBox = BoxLayoutUtils.createHorizontalPanel();
        JPanel numeroTelBox = BoxLayoutUtils.createHorizontalPanel();
        JPanel numeroSecuBox = BoxLayoutUtils.createHorizontalPanel();

        nomBox.add(new JLabel("Nom      : "));
        prenomBox.add(new JLabel("Prenom   : "));
        adresseBox.add(new JLabel("Adresse  : "));
        numeroTelBox.add(new JLabel("N°teleph : "));
        numeroSecuBox.add(new JLabel("N°Secu   : "));

        //nomBox.add(Box.createHorizontalStrut(10));
        //prenomBox.add(Box.createHorizontalStrut(10));
        //adresseBox.add(Box.createHorizontalStrut(10));
        //numeroTelBox.add(Box.createHorizontalStrut(10));
        //numeroSecuBox.add(Box.createHorizontalStrut(10));

        JTextField nom = new JTextField(10);
        JTextField prenom = new JTextField(10);
        JTextField adresse = new JTextField(10);

        nomBox.add(nom);
        prenomBox.add(prenom);
        adresseBox.add(adresse);
        numeroTelBox.add(numeroTel);
        numeroSecuBox.add(numeroSecu);

        //BoxLayoutUtils.setGroupAlignmentX(new JComponent[] { nomBox, prenomBox, adresseBox, numeroTelBox, numeroSecuBox }, Component.LEFT_ALIGNMENT);
        //BoxLayoutUtils.setGroupAlignmentY(new JComponent[] { nom, prenom, adresse, numeroTel, numeroSecu}, Component.CENTER_ALIGNMENT);

        JButton buttonEnregistrer = new JButton("Enregistrer", new ImageIcon(Interface.class.getResource("icons/save.png")));
        JButton buttonAnnuler = new JButton("Annuler", new ImageIcon(Interface.class.getResource("icons/cancel.png")));

        JPanel buttonBox = new JPanel( new GridLayout( 1,2,5,0) );

        buttonBox.add(buttonEnregistrer);
        buttonBox.add(buttonAnnuler);

        panel.add(nomBox);
        panel.add(Box.createVerticalStrut(20));
        panel.add(prenomBox);
        panel.add(Box.createVerticalStrut(20));
        panel.add(adresseBox);
        panel.add(Box.createVerticalStrut(20));
        panel.add(numeroTelBox);
        panel.add(Box.createVerticalStrut(20));
        panel.add(numeroSecuBox);
        panel.add(Box.createVerticalStrut(20));
        panel.add(buttonBox);

        JFormattedTextField finalNumeroTel = numeroTel;
        JFormattedTextField finalNumeroSecu = numeroSecu;

        buttonEnregistrer.addActionListener(arg0 -> {
            if(nom.getText().length() > 0) {
                Client client = new Client(finalNumeroSecu.getText(), nom.getText(), prenom.getText(),adresse.getText(), finalNumeroTel.getText());
                Client.hashMapClients.put(finalNumeroSecu.getText(), client);
                JOptionPane.showMessageDialog(null, "Client enregistré avec succès!",
                        " ", JOptionPane.INFORMATION_MESSAGE, new ImageIcon(Interface.class.getResource("icons/synchro.png")));
            } else { JOptionPane.showMessageDialog(null, "Veuillez remplir correctement!",
                    " ", JOptionPane.INFORMATION_MESSAGE, new ImageIcon(Interface.class.getResource("icons/erreur.png")));
            }
        });

        buttonAnnuler.addActionListener(arg0 -> {
            int select = Interface.tabbedPane.getSelectedIndex();
            if (select >= 0) Interface.tabbedPane.removeTabAt(select);
        });

        return panel;
    }

    private JPanel modifierClient(String key){

        JPanel panel = new JPanel();

        panel.setLayout(new FlowLayout());
        panel.setBorder(BorderFactory.createLineBorder(Color.lightGray));

        JFormattedTextField numeroTel = null, numeroSecu = null;

        Box verticalBox = Box.createVerticalBox();

        try {
            MaskFormatter phoneFormatter = new MaskFormatter("##########");
            MaskFormatter numFormatter = new MaskFormatter("#############");
            phoneFormatter.setPlaceholderCharacter('0');
            numFormatter.setPlaceholderCharacter('0');
            numeroSecu = new JFormattedTextField(numFormatter);
            numeroTel = new JFormattedTextField(phoneFormatter);
            numeroTel.setColumns(16);
            numeroSecu.setColumns(16);
            numeroSecu.setValue(Client.hashMapClients.get(key).getNumeroSecu());
            numeroTel.setValue(Client.hashMapClients.get(key).getNumero());

        } catch (Exception e) { e.printStackTrace(); }

        JTextField nom = new JTextField(Client.hashMapClients.get(key).getNom(),16);
        JTextField prenom = new JTextField(Client.hashMapClients.get(key).getPrenom(),16);
        JTextField adresse = new JTextField(Client.hashMapClients.get(key).getAdresse(),16);

        verticalBox.add(nom);
        verticalBox.add(prenom);
        verticalBox.add(adresse);
        verticalBox.add(numeroTel);
        verticalBox.add(numeroSecu);

        panel.add(verticalBox);
        return panel;
    }

    private Component supprimerClient(){
        //TODO
        return null;
    }
    private Component chercherClient(){
        return null;
    }
    private String VerificationCle(){

        ImageIcon icon1 = new ImageIcon(Interface.class.getResource("icons/key.png"));
        ImageIcon icon2 = new ImageIcon(Interface.class.getResource("icons/erreur.png"));

        String key = (String) JOptionPane.showInputDialog(null,"Entrez le N°Secu de client:",null, QUESTION_MESSAGE , icon1,null,null);

        while(true) {
            if(Client.hashMapClients.containsKey(key)) return key;
            if(!Client.hashMapClients.containsKey(key)) {
                key = (String) JOptionPane.showInputDialog(null,"Entrez le N°Secu de client:",null, QUESTION_MESSAGE , icon2,null,null);
            } if(key.equals("null")) return "null";
        }
    }
}
//----------------------------------------------------------------------------------------------------------------------
class MenuMedicaments extends JFrame {
    public JMenu main() {
        JMenu menu = new JMenu("Medicaments");

        Action approvisionner = new AbstractAction("Approvisionner", new ImageIcon(Interface.class.getResource("icons/capsule.png"))) {
            @Override
            public void actionPerformed(ActionEvent e) {
                System.out.println("approvisionner");
            }
        };

        Action ajouter = new AbstractAction("Ajouter", new ImageIcon(Interface.class.getResource("icons/add2.png"))) {
            @Override
            public void actionPerformed(ActionEvent e) {
                System.out.println("approvisionner");
            }
        };

        Action rechercher = new AbstractAction("Rechercher", new ImageIcon(Interface.class.getResource("icons/search.png"))) {
            @Override
            public void actionPerformed(ActionEvent e) {
                System.out.println("rechercher");
            }
        };

        Interface.toolBar.add(ajouter);
        Interface.toolBar.add(rechercher);
        Interface.toolBar.add(approvisionner);
        menu.add(new JMenuItem(ajouter));
        menu.add(new JMenuItem(rechercher));
        menu.add(new JMenuItem(approvisionner));
        return menu;
    }
}
//----------------------------------------------------------------------------------------------------------------------
class MenuArchives extends JFrame {

    public JMenu main() {

        JMenu menu = new JMenu("Archives");
        int index = Interface.tabbedPane.getTabCount();
        JLabel label = new JLabel("Info listes");
        label.setIcon(new ImageIcon(Interface.class.getResource("icons/del.png")));

        label.addMouseListener(new MouseAdapter() { // TODO  ML reajit sur toute label non seulement l'icone, il faut le modifier + tard
            @Override
            public void mouseClicked(MouseEvent e) {
                int select = Interface.tabbedPane.getSelectedIndex();
                if (select >= 0) Interface.tabbedPane.removeTabAt(select);
            }
        });
        Action clients = new AbstractAction("Clients", new ImageIcon(Interface.class.getResource("icons/archives.png"))) {
            @Override
            public void actionPerformed(ActionEvent e) {
                Interface.tabbedPane.addTab("Liste clients", new JScrollPane(listeClients())); //  <html><i>text cursive
                Interface.tabbedPane.setTabComponentAt(index, label);
            }
        };
        Action medicaments = new AbstractAction("Medicaments", new ImageIcon(Interface.class.getResource("icons/archives1.png"))) {
            @Override
            public void actionPerformed(ActionEvent e) {
                Interface.tabbedPane.addTab("Liste medicaments", new JScrollPane(listeMedicaments()));
                Interface.tabbedPane.setTabComponentAt(index, label);
            }
        };

        Interface.toolBar.add(clients);
        Interface.toolBar.add(medicaments);
        menu.add(new JMenuItem(clients));
        menu.add(new JMenuItem(medicaments));
        return menu;
    }

    private JTable listeClients(){
        DefaultTableModel model = new DefaultTableModel(new Object[] {"N°Secu", "Nom", "Prenom", "Adresse", "N°Tel"}, 0);

        for(String key : Client.hashMapClients.keySet()) {
            model.addRow(new Object[] {
                    Client.hashMapClients.get(key).getNumeroSecu(),
                    Client.hashMapClients.get(key).getNom(),
                    Client.hashMapClients.get(key).getPrenom(),
                    Client.hashMapClients.get(key).getAdresse(),
                    Client.hashMapClients.get(key).getNumero()});
        }
        JTable table = new JTable(model);
        table.setSelectionBackground(Color.LIGHT_GRAY);
        // table.setSelectionForeground(Color.BLACK);
        return table;
    }

    private JTable listeMedicaments(){
        DefaultTableModel model = new DefaultTableModel(new Object[] {"Reference", "Libelle", "Description", "Qualite", "Prix"}, 0);

        for(String key : Medicament.hashMapMedicaments.keySet()) {
            model.addRow(new Object[] {
                    Medicament.hashMapMedicaments.get(key).getReference(),
                    Medicament.hashMapMedicaments.get(key).getLibelle(),
                    Medicament.hashMapMedicaments.get(key).getDescription(),
                    Medicament.hashMapMedicaments.get(key).getQualite(),
                    Medicament.hashMapMedicaments.get(key).getPrix()});
        }
        JTable table = new JTable(model);
        table.setSelectionBackground(Color.LIGHT_GRAY);
        return table;
    }
}
//----------------------------------------------------------------------------------------------------------------------
class MenuAchat extends JFrame {

    public JMenu main() {
        Interface.panel.repaint();
        Interface.tabbedPane.removeAll();
        JMenu menu = new JMenu("Achat");
        Action achat = new AbstractAction("Effectuer", new ImageIcon(Interface.class.getResource("icons/euro.png"))) {
            @Override
            public void actionPerformed(ActionEvent e) {
                System.out.println("acheter");
                Interface.tabbedPane.addTab("Effectuer un achat", new JPanel());
            }
        };

        Interface.toolBar.add(achat);
        menu.add(new JMenuItem(achat));
        Interface.panel.add(Interface.tabbedPane, BorderLayout.CENTER);
        return menu;
    }
}
//----------------------------------------------------------------------------------------------------------------------

class APP5 extends JFrame {
    public static void main(String[] args) {
        try {
            JFrame.setDefaultLookAndFeelDecorated(true);
            new Interface();
        } catch (NullPointerException e) {
            System.out.print("Erreur! Veuillez reessayer.\n");
        }
    }
}



//----------------------------------------------------------------------------------------------------------------------

class Client {
    public String numeroSecu,nom, prenom,adresse, numero;
    public static HashMap<String, Client> hashMapClients = new HashMap<>();

    public Client(String numeroSecu, String nom, String prenom, String adresse, String numero) {
        this.nom = nom;
        this.prenom = prenom;
        this.adresse = adresse;
        this.numero = numero;
        this.numeroSecu = numeroSecu;
    }

    public void afficherEtudiant() {
        // TODO
    }


    public static void supprimerEtudiant() {
        //TODO
    }

    public static void listEtudiants() {
        //TODO
    }

    public String getNumeroSecu() { return numeroSecu; }
    public String getAdresse() { return adresse; }
    public String getPrenom() { return prenom;  }
    public String getNumero() { return numero; }
    public String getNom() { return nom; }

    public void setNom(String nom) { this.nom = nom; }
    public void setNumero(String numero){this.numero = numero;}
    public void setPrenom(String prenom) { this.prenom = prenom; }
    public void setAdresse(String adresse) { this.adresse = adresse; }
    public void setNumeroSecu(String numeroSecu){this.numeroSecu = numeroSecu;}
}


class Medicament {
    public String reference, libelle, description, qualite, prix;
    public static HashMap<String, Medicament> hashMapMedicaments = new HashMap<>();

    public Medicament(String reference, String libelle, String description, String qualite, String prix) {
        this.reference = reference;
        this.libelle = libelle;
        this.description = description;
        this.qualite = qualite;
        this.prix = prix;
    }

    public String getReference() { return reference; }
    public String getLibelle() { return libelle; }
    public String getDescription() { return description;  }
    public String getQualite() { return qualite; }
    public String getPrix() { return prix; }

    public void setReference(String reference) { this.reference = reference; }
    public void setLibelle(String numero){this.libelle = libelle;}
    public void setDescription(String prenom) { this.description = description; }
    public void setQualite(String adresse) { this.qualite = qualite; }
    public void setPrix(String numeroSecu){this.prix = prix;}
}


